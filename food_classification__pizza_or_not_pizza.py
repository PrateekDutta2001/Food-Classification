# -*- coding: utf-8 -*-
"""Food Classification_ pizza-or-not-pizza.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BVhO-S-MNPdRVPlxLIZLPgdo1YNSAwsR
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/gdrive/')
# %cd /gdrive

ls

cd/gdrive/My Drive/Food classification/

ls

import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import tensorflow as tf
from tensorflow.keras.layers import Input,Conv2D,MaxPool2D,Dense, Flatten, GlobalAveragePooling2D

from tensorflow.keras.models import Sequential
import cv2
import pathlib

path="/gdrive/My Drive/Food classification"
data_dir=pathlib.Path(path)

import random
import glob

image=glob.glob("/gdrive/My Drive/Food classification/*/*.jpg")
image=pd.Series(image)
print("No of images :",len(image))

classes=os.listdir(path)

plt.figure(figsize=(16,8))

for x in range(10):
    i=random.randint(0,1)
    images=os.listdir(path+'/'+classes[i])
    j=random.randint(0,900)
    image=cv2.imread(path+'/'+classes[i]+'/'+images[j])
    image=cv2.cvtColor(image,cv2.COLOR_BGR2RGB)
    ax=plt.subplot(5,5,x+1)
    plt.imshow(image)
    plt.title(classes[i])
    plt.axis("off")
    
    
plt.show()

from keras.preprocessing.image import ImageDataGenerator

train_data=ImageDataGenerator(rescale=1./255,validation_split=0.2)
train_ds=train_data.flow_from_directory(
    path,
    subset='training',
    target_size=(224,224),
    batch_size=32
    
)
test_ds=train_data.flow_from_directory(
    path,
    subset='validation',
    target_size=(224,224),
    batch_size=32
)

from tensorflow.keras.applications import MobileNet

mobilenet=MobileNet(
    input_shape=(224,224,3),
    include_top=False,
    weights='imagenet'
)

for layers in mobilenet.layers:
    layers.trainable=False

from tensorflow import keras
from keras.layers import Dropout

model=Sequential()
model.add(mobilenet)
model.add(GlobalAveragePooling2D())
model.add(Flatten())
model.add(Dense(1024,activation='relu'))
model.add(Dense(512,activation='relu'))
model.add(Dense(2,activation='softmax',name='classification'))

model.compile(optimizer=tf.keras.optimizers.SGD(learning_rate=0.001,momentum=0.9),
             loss='categorical_crossentropy',
             metrics=['accuracy'])


model.summary()

history=model.fit(train_ds,validation_data=test_ds,epochs=5)

model.evaluate(test_ds)

plt.figure()
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.legend(['loss','test_loss'],loc='upper right')
plt.show()


plt.figure()
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.legend(['accuracy','test_accuracy'])

plt.show()

model.save('Food classification.h5')